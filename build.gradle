buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'scala'
apply plugin: 'forge'

// Config file with custom properties
ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

// grab buildNumber
ext.buildnumber = "DEV" // this will be referenced as simply project.buildnumber from now on.
if (System.getenv().BUILD_NUMBER)
    project.buildnumber = System.getenv().BUILD_NUMBER
logger.lifecycle "BUILDING VERSION: " + project.buildnumber

version = config.mod_version
group = "com.rubensworks.notenoughloot"
archivesBaseName = "NotEnoughLoot"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = "eclipse/assets"
    
    replaceIn "Reference.scala"
    replace "@VERSION@", project.version
    replace "@MC_VERSION@", project.config.minecraft_version
    replace "@FORGE_VERSION@", project.config.forge_version
    replace "@BUILD_NUMBER@", project.buildnumber
}

version = "${config.minecraft_version}-${config.mod_version}-${buildnumber}"

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info or the psd folder
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile "codechicken:NotEnoughItems:${config.minecraft_version}-${config.NEI_version}:dev"
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

// some crazy stuff to make sure the chicken stuff is in the mods folder...
// because it wont work otherwise...  because FML doesnt laod coremods from the classpath
// Thanks to AbrarSyed for this piece of code.
task copyChicken(type: Copy, dependsOn: "extractUserDev") {
    from configurations.compile
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file(minecraft.assetDir + "/../mods") // parallel to the assets dir
}
tasks.setupDevWorkspace.dependsOn copyChicken
tasks.setupDecompWorkspace.dependsOn copyChicken
